#include common.variables
#################################################################
## Function definitions - included from file common.functions
#################################################################
# Copyright (C) 2004 by Frank Küster <frank@debian.org>.
# $Id$

# internal variables for common.functions
MKTMPDIR=/tmp
SYMLINK_MOVE_EXT=<:=$SYMLINK_MOVE_EXT:>
TEXMFSYSVAR=<:=$TEXMFSYSVAR:>

savemove(){
  source="$1"
  dest="$2"
  chown --reference=$dest $source
  chmod --reference=$dest $source
  mv $source $dest
} 

rename_catinfo(){
  oldfile=$1
  newfile=$oldfile.$MOVE_EXT
  echo $INFO_TEXT > $newfile
  cat $oldfile >> $newfile
  chmod --reference=$oldfile $newfile
  chown --reference=$oldfile $newfile
  rm -f $oldfile
}

create_tetex_formats(){
  options="$@"
  tempfile=`mktemp -p $MKTMPDIR tetex.postinst.XXXXXXXX`
  echo "Running fmtutil-sys. This may take some time. ..."
  if fmtutil-sys $options > $tempfile; then
    rm -f $tempfile
  else
    echo
    echo "fmtutil failed. Output has been stored in"
    echo "$tempfile"
    echo "Please include this file if you report a bug."
    exit 1
  fi
}

create_fontmaps(){
    tempfile=`mktemp -p $MKTMPDIR tetex.updmap.XXXXXXXX`
    echo -n "Running updmap-sys. This may take some time. ..."
    if updmap-sys 2> $tempfile; then
      rm -f $tempfile
      echo " done."
    else
      echo
      echo "updmap failed. Output has been stored in"
      echo "$tempfile"
      echo "Please include this file if you report a bug."
      exit 1
    fi
    echo
}

handle_stateof_configfile(){
  # call this function with the correct action (see below) as first
  # argument, the configuration file to handle as second, and the 
  # package it belongs to as third argument.
  #
  # If you want to understand the function, start reading the --remove
  # action. The function cannot do all for you! What you have to do
  # additionally in preinst is outlined in the preinst action.

  CONFIG_FILE="$2"
  PACKAGE=$3

  # static variables
  CONFSTATEDIR=<:=$confstatedir:>
  NO_CONFIG_PREFIX=<:=$no_config_prefix:>
  PCONFSTATEDIR=$CONFSTATEDIR/$PACKAGE
  SAVED_CONFIG_FILE=$PCONFSTATEDIR/`basename $CONFIG_FILE`
  NO_CONFIG_FILE=$PCONFSTATEDIR/$NO_CONFIG_PREFIX.`basename $CONFIG_FILE`
  TEMP_CONFIG_FILE="$PCONFSTATEDIR/`basename $CONFIG_FILE`.tmp"

  case $1 in
    --preinst)
      if [ ! -d "$PCONFSTATEDIR" ]; then
	mkdir --mode=755 "$PCONFSTATEDIR"
      fi
 
# here comes what you need to do in _your_ preinst script

#     # if an old version is in state rc, we get "$old_version" as second arg
#     # if an other version is installed, we will be called with upgrade.
#     # Therefore we know that we install on a clean system if we've got 
#     # only one argument and first argument is "install"
#      case $1 in
#	install)
#	  if [ $# = 1 ] && [ ! -f $CONFIG_FILE ]; then
#	    cat > "$TEMP_CONFIG_FILE" <<EOF
#Put the filecontents here
#EOF
#	    mv "$TEMP_CONFIG_FILE" "$CONFIG_FILE"
#
#	  fi
#	  ;;
#      esac
      ;;
    --postinst)
      if [ ! -f "$CONFIG_FILE" ]; then
      # the config file does not exist (might also be deleted by the admin)
	if [ -f "$SAVED_CONFIG_FILE" ]; then
	# an old version was in state rc, and the admin wants the file
	  if [ ! -f "$NO_CONFIG_FILE" ]; then
	    mv "$SAVED_CONFIG_FILE" "$CONFIG_FILE"
	  else
	    echo >&2 <<EOF
Error: 
$SAVED_CONFIG_FILE and $NO_CONFIG_FILE
should not be present at the same time on the system. If you did not fiddle 
with one of these files yourself, please note carefully the last operations
you did with $PACKAGE (installations, removals, purges, etc.) 
and file a bug.
EOF
	  fi
	fi
      fi
      rm -f $NO_CONFIG_FILE

      ;;
    --remove)
      # updon remove, save away the config file (with possible local changes)
      # or note that the local admin has deleted it.
      if [ -f $CONFIG_FILE ]; then
	mv $CONFIG_FILE $SAVED_CONFIG_FILE
      elif [ ! -f $SAVED_CONFIG_FILE ]; then
	: > $NO_CONFIG_FILE
      fi
      ;;
    --purge)
      rm -f "$CONFIG_FILE" "$SAVED_CONFIG_FILE" "$NO_CONFIG_FILE" "$TEMP_CONFIG_FILE"
      rmdir $PCONFSTATEDIR
      ;;
  esac
}

preinst_move_symlink(){
  existing_symlink="$1"
  if [ -e $existing_symlink ] && [ -L $existing_symlink ]; then
    echo "Removing obsolete symlink $existing_symlink."
      mv  $existing_symlink  $existing_symlink.$SYMLINK_MOVE_EXT

  fi
}

preinst_move_dir(){
  existing_dir="$1"
  if [ -d $existing_dir ] && [ ! -L $existing_dir ]; then
    echo "Removing obsolete directory $existing_dir."
      mv  $existing_dir  $existing_dir.$SYMLINK_MOVE_EXT

  fi
}

# for abort-upgrade
preinst_restore_symlink(){
  stored_symlink="$1"
  if [ -e $stored_symlink.$SYMLINK_MOVE_EXT ] && [ ! -e $stored_symlink ]; then
    mv  $stored_symlink.$SYMLINK_MOVE_EXT  $stored_symlink
  fi
}

preinst_restore_dir(){
  stored_dir="$1"
  if [ -e $stored_dir.$SYMLINK_MOVE_EXT ] && [ ! -e $stored_dir ]; then
    mv  $stored_dir.$SYMLINK_MOVE_EXT  $stored_dir
  fi
}

postinst_remove_saveddir(){
  saveddir="$1"
  if [ -e $saveddir.$SYMLINK_MOVE_EXT ] && \
    [ -L $saveddir ] && \
    [ -e $saveddir ]; # true if target exists
    then
    rm -r $saveddir.$SYMLINK_MOVE_EXT
  fi
}

postinst_remove_savedlink(){
  savedlink="$1"
  if [ -e $savedlink.$SYMLINK_MOVE_EXT ] && \
    [ ! -L $savedlink ] && \
    [ -d $savedlink ];
    then
    rm -r $savedlink.$SYMLINK_MOVE_EXT
  fi
}

select_lsrfile() {
    case $1 in
     main) LSR=$TEXMFSYSVAR/ls-R-TEXMFMAIN ;;
     var)  LSR=$TEXMFSYSVAR/ls-R ;;
     cache) LSR=/var/cache/fonts/ls-R ;;
     *) echo "select_lsr: don't know how to set this: $1" >&2 ;;
    esac
    echo $LSR
}

clean_texenvironment(){
  envvars="AFMFONTS BIBINPUTS BSTINPUTS CMAPFONTS CWEBINPUTS ENCFONTS GFFONTS \
GLYPHFONTS INDEXSTYLE LIGFONTS MAILCAPLIBDIR MFBASES MFINPUTS MFPOOL MFTINPUTS \
MIMELIBDIR MISCFONTS MISSFONT_LOG MPINPUTS MPMEMS MPPOOL MPSUPPORT MPXCOMMAND \
OCPINPUTS OFMFONTS OPENTYPEFONTS OPLFONTS OTPINPUTS OVFFONTS OVPFONTS PDFTEXCONFIG \
PKFONTS PSHEADERS SFDFONTS SYSTEXMF T1FONTS T42FONTS T4HTINPUTS TEX4HTFONTSET \
TEX4HTINPUTS TEXCONFIG TEXDOCEXT TEXDOCHTML TEXDOCS TEXDOCSCOMPRESS TEXDOCSSUFFIX \
TEXFONTMAPS TEXFORMATS TEX_HUSH TEXINPUTS TEXMF TEXMFCNF TEXMFCONFIG TEXMFDBS \
TEXMFDIST TEXMFHOME TEXMFLOCAL TEXMFMAIN TEXMFSCRIPTS TEXMFSYSCONFIG TEXMFSYSVAR \
TEXMFVAR TEXPICTS TEXPOOL TEXPSHEADERS TEXSOURCES TFMFONTS TRFONTS TTFONTS \
VARTEXFONTS VFFONTS WEB2C WEBINPUTS"
  for var in $envvars; do
    unset $var || true
  done

}

#################################################################
##  End of function definitions from file common.functions
#################################################################


